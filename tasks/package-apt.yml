---

- name: Check that HTTPS transport is available to APT
  apt: name="apt-transport-https" state=present
  when: package_apt_repo_https

- name: Package APT - Install sources.list
  template:
    src: "sources.list.j2"
    dest: "/etc/apt/sources.list"
    owner: root
    group: root
    mode: 0644
  register: sources_updated

- name: Package APT - Install backports.list
  template:
    src: "backports.list.j2"
    dest: "{{ package_apt_repo_path }}/backports.list"
    owner: root
    group: root
    mode: 0644
  register: sources_updated
  when:
    - package_apt_repo_backports
    - ansible_distribution == 'Debian'

- name: Package APT - Install experimental.list
  template:
    src: "experimental.list.j2"
    dest: "{{ package_apt_repo_path }}/experimental.list"
    owner: root
    group: root
    mode: 0644
  register: sources_updated
  when: 
    - package_apt_repo_experimental
    - ansible_distribution == 'Debian'

- name: packages APT - Custom repos
  when: package_apt_repo_custom | length > 0
  block: 

    - name: Package APT - Install Custom repo key
      apt_key:
        url: "{{ item.key }}"
        state: "present"
      when: item.state | default(package_state)
      with_items: "{{ package_apt_repo_custom }}"
      loop_control:
        label: "{{ item.key }}"
      
    - name: Package APT - Install Custom repo file
      template:
        src: "custom.list.j2"
        dest: "{{ package_apt_repo_path }}/{{ item.filename | default(item.name) }}.list"
        owner: root
        group: root
        mode: 0644
      register: sources_updated
      with_items: "{{ package_apt_repo_custom }}"
      when: item.state != 'absent'
      loop_control:
        label: "{{ package_apt_repo_path }}/{{ item.filename | default(item.name) }}.list"

    - name: Package APT - Update APT cache
      apt: 
        update_cache: yes
        cache_valid_time: "{{ 0 if package_update_cache is defined and sources_updated.changed else package_cache_valid_time }}"

    - name: Package APT - Check if repo file exists
      stat:
        path: "{{ package_apt_repo_path }}/{{ item.filename | default(item.name) }}.list"
      register: result
      with_items: "{{ package_apt_repo_custom }}"
      when: item.state == 'absent'
      loop_control:
        label: "{{ package_apt_repo_path }}/{{ item.filename | default(item.name) }}.list"

    - name: Package APT - Remove Custom repo file
      file:
        path: "{{ item.stat.path }}"
        state: absent
      register: sources_updated
      with_items: "{{ result.results }}"
      when: item.item.state == 'absent' and item.stat.exists
      loop_control:
        label: "{{ item._ansible_item_label }}"

    - name: Package APT - Update APT cache
      apt: 
        update_cache: yes
        cache_valid_time: "{{ 0 if package_update_cache is defined and sources_updated.changed else package_cache_valid_time }}"

- name: Package APT - Install packages
  apt:
    name: "{{ item.apt | default(item.name) }}"
    state: "{{ item.state | default(package_state) }}"
    update_cache: "{{ package_update_cache }}"
    cache_valid_time: "{{ package_cache_valid_time }}"
  when: (item.apt | default('True'))
  with_flattened:
    - "{{ package_list }}"
